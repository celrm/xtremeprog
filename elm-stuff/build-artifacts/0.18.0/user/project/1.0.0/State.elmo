var _user$project$State$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$State$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Cambiar':
				var _p5 = _p0._2;
				var _p4 = _p0._1;
				var nuevasTareas = A3(
					_elm_community$list_extra$List_Extra$updateAt,
					_p4,
					function (_p1) {
						var _p2 = _p1;
						var _p3 = _p2._1;
						return {
							ctor: '_Tuple2',
							_0: _p2._0,
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_elm_community$list_extra$List_Extra$removeAt, _p5, _p3),
								{
									ctor: '::',
									_0: function (t) {
										return _elm_lang$core$Native_Utils.update(
											t,
											{done: !t.done});
									}(
										A2(
											_elm_lang$core$Maybe$withDefault,
											A3(_user$project$Types$Tarjeta, 1, '', true),
											A2(_elm_community$list_extra$List_Extra$getAt, _p5, _p3))),
									_1: {ctor: '[]'}
								})
						};
					},
					model.tareas);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							tareas: nuevasTareas,
							$eval: A2(
								_elm_lang$core$List$all,
								function (_) {
									return _.done;
								},
								_elm_lang$core$Tuple$second(
									A2(
										_elm_lang$core$Maybe$withDefault,
										{
											ctor: '_Tuple2',
											_0: '',
											_1: {ctor: '[]'}
										},
										A2(_elm_community$list_extra$List_Extra$getAt, _p4, nuevasTareas)))) ? false : model.$eval,
							numerito: _p4
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Add':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							todo: A2(_elm_lang$core$List$drop, 1, model.todo),
							tareas: A2(
								_elm_lang$core$Basics_ops['++'],
								model.tareas,
								A2(_elm_lang$core$List$take, 1, model.todo))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Vuelta':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							tareas: A3(
								_elm_community$list_extra$List_Extra$updateAt,
								model.numerito,
								_elm_lang$core$Tuple$mapSecond(_elm_lang$core$List$reverse),
								model.tareas),
							$eval: true
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Evaluar':
				var _p6 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							numerito: _p6,
							$eval: false,
							tareas: A3(
								_elm_community$list_extra$List_Extra$updateAt,
								_p6,
								_elm_lang$core$Tuple$mapSecond(_elm_lang$core$List$reverse),
								model.tareas)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Input':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{str: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							tareas: A3(
								_elm_community$list_extra$List_Extra$updateAt,
								model.numerito,
								_elm_lang$core$Tuple$mapSecond(
									function (lista) {
										return A2(
											_elm_lang$core$Basics_ops['++'],
											lista,
											{
												ctor: '::',
												_0: A3(
													_user$project$Types$Tarjeta,
													_elm_lang$core$List$length(lista) + 1,
													model.str,
													false),
												_1: {ctor: '[]'}
											});
									}),
								model.tareas),
							str: ''
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$State$h3 = {
	ctor: '_Tuple2',
	_0: 'Elaborar tienda online de entradas, merch...',
	_1: {
		ctor: '::',
		_0: A3(_user$project$Types$Tarjeta, 1, 'Métodos de pago: Tarjeta, Paypal', false),
		_1: {
			ctor: '::',
			_0: A3(_user$project$Types$Tarjeta, 2, 'Catálogo de merchandising', false),
			_1: {
				ctor: '::',
				_0: A3(_user$project$Types$Tarjeta, 3, 'Venta de entradas', false),
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$State$h2 = {
	ctor: '_Tuple2',
	_0: 'Necesitamos dar a conocer nuestra obra.',
	_1: {
		ctor: '::',
		_0: A3(_user$project$Types$Tarjeta, 1, 'Pestaña con nuestra discografía', false),
		_1: {
			ctor: '::',
			_0: A3(_user$project$Types$Tarjeta, 2, 'Reproducir música mediante Spotify', false),
			_1: {
				ctor: '::',
				_0: A3(_user$project$Types$Tarjeta, 3, 'Descargar música', false),
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$State$h1 = {
	ctor: '_Tuple2',
	_0: 'Queremos una web visualmente atractiva.',
	_1: {
		ctor: '::',
		_0: A3(_user$project$Types$Tarjeta, 1, 'Pestaña de información general', false),
		_1: {
			ctor: '::',
			_0: A3(_user$project$Types$Tarjeta, 2, 'Pestaña sobre conciertos', false),
			_1: {ctor: '[]'}
		}
	}
};
var _user$project$State$init = {
	ctor: '_Tuple2',
	_0: A5(
		_user$project$Types$Model,
		{
			ctor: '::',
			_0: _user$project$State$h1,
			_1: {
				ctor: '::',
				_0: _user$project$State$h2,
				_1: {
					ctor: '::',
					_0: _user$project$State$h3,
					_1: {ctor: '[]'}
				}
			}
		},
		{ctor: '[]'},
		true,
		0,
		''),
	_1: _elm_lang$core$Platform_Cmd$none
};
